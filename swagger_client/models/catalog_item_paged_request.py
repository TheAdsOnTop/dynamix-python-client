# coding: utf-8

"""
    Dynamix

    Sign up for Dynamix & grab your token.  # noqa: E501

    OpenAPI spec version: v0.1.0
    Contact: david@theadsontop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.paged_request import PagedRequest  # noqa: F401,E501


class CatalogItemPagedRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_rids': 'list[str]',
        'request': 'PagedRequest'
    }

    attribute_map = {
        'item_rids': 'itemRids',
        'request': 'request'
    }

    def __init__(self, item_rids=None, request=None):  # noqa: E501
        """CatalogItemPagedRequest - a model defined in Swagger"""  # noqa: E501

        self._item_rids = None
        self._request = None
        self.discriminator = None

        if item_rids is not None:
            self.item_rids = item_rids
        if request is not None:
            self.request = request

    @property
    def item_rids(self):
        """Gets the item_rids of this CatalogItemPagedRequest.  # noqa: E501


        :return: The item_rids of this CatalogItemPagedRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._item_rids

    @item_rids.setter
    def item_rids(self, item_rids):
        """Sets the item_rids of this CatalogItemPagedRequest.


        :param item_rids: The item_rids of this CatalogItemPagedRequest.  # noqa: E501
        :type: list[str]
        """

        self._item_rids = item_rids

    @property
    def request(self):
        """Gets the request of this CatalogItemPagedRequest.  # noqa: E501


        :return: The request of this CatalogItemPagedRequest.  # noqa: E501
        :rtype: PagedRequest
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this CatalogItemPagedRequest.


        :param request: The request of this CatalogItemPagedRequest.  # noqa: E501
        :type: PagedRequest
        """

        self._request = request

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CatalogItemPagedRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
