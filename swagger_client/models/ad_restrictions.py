# coding: utf-8

"""
    Dynamix

    Sign up for Dynamix & grab your token.  # noqa: E501

    OpenAPI spec version: v0.1.0
    Contact: david@theadsontop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AdRestrictions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'restricted_keywords': 'list[str]',
        'video_allowed': 'bool',
        'valid_slot_lengths_in_milliseconds': 'list[int]'
    }

    attribute_map = {
        'restricted_keywords': 'restrictedKeywords',
        'video_allowed': 'videoAllowed',
        'valid_slot_lengths_in_milliseconds': 'validSlotLengthsInMilliseconds'
    }

    def __init__(self, restricted_keywords=None, video_allowed=None, valid_slot_lengths_in_milliseconds=None):  # noqa: E501
        """AdRestrictions - a model defined in Swagger"""  # noqa: E501

        self._restricted_keywords = None
        self._video_allowed = None
        self._valid_slot_lengths_in_milliseconds = None
        self.discriminator = None

        if restricted_keywords is not None:
            self.restricted_keywords = restricted_keywords
        self.video_allowed = video_allowed
        if valid_slot_lengths_in_milliseconds is not None:
            self.valid_slot_lengths_in_milliseconds = valid_slot_lengths_in_milliseconds

    @property
    def restricted_keywords(self):
        """Gets the restricted_keywords of this AdRestrictions.  # noqa: E501

        Keywords represent words that would describe an image after doing image analysis.  # noqa: E501

        :return: The restricted_keywords of this AdRestrictions.  # noqa: E501
        :rtype: list[str]
        """
        return self._restricted_keywords

    @restricted_keywords.setter
    def restricted_keywords(self, restricted_keywords):
        """Sets the restricted_keywords of this AdRestrictions.

        Keywords represent words that would describe an image after doing image analysis.  # noqa: E501

        :param restricted_keywords: The restricted_keywords of this AdRestrictions.  # noqa: E501
        :type: list[str]
        """

        self._restricted_keywords = restricted_keywords

    @property
    def video_allowed(self):
        """Gets the video_allowed of this AdRestrictions.  # noqa: E501


        :return: The video_allowed of this AdRestrictions.  # noqa: E501
        :rtype: bool
        """
        return self._video_allowed

    @video_allowed.setter
    def video_allowed(self, video_allowed):
        """Sets the video_allowed of this AdRestrictions.


        :param video_allowed: The video_allowed of this AdRestrictions.  # noqa: E501
        :type: bool
        """
        if video_allowed is None:
            raise ValueError("Invalid value for `video_allowed`, must not be `None`")  # noqa: E501

        self._video_allowed = video_allowed

    @property
    def valid_slot_lengths_in_milliseconds(self):
        """Gets the valid_slot_lengths_in_milliseconds of this AdRestrictions.  # noqa: E501

        List of slot lengths in milliseconds that are valid for this sink.  # noqa: E501

        :return: The valid_slot_lengths_in_milliseconds of this AdRestrictions.  # noqa: E501
        :rtype: list[int]
        """
        return self._valid_slot_lengths_in_milliseconds

    @valid_slot_lengths_in_milliseconds.setter
    def valid_slot_lengths_in_milliseconds(self, valid_slot_lengths_in_milliseconds):
        """Sets the valid_slot_lengths_in_milliseconds of this AdRestrictions.

        List of slot lengths in milliseconds that are valid for this sink.  # noqa: E501

        :param valid_slot_lengths_in_milliseconds: The valid_slot_lengths_in_milliseconds of this AdRestrictions.  # noqa: E501
        :type: list[int]
        """

        self._valid_slot_lengths_in_milliseconds = valid_slot_lengths_in_milliseconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdRestrictions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
