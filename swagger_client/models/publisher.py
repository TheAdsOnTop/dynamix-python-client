# coding: utf-8

"""
    Dynamix

    Sign up for Dynamix & grab your token.  # noqa: E501

    OpenAPI spec version: v0.1.0
    Contact: david@theadsontop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.ad_request_weights import AdRequestWeights  # noqa: F401,E501
from swagger_client.models.ad_resolution_info import AdResolutionInfo  # noqa: F401,E501
from swagger_client.models.ad_restrictions import AdRestrictions  # noqa: F401,E501
from swagger_client.models.ad_source_restriction import AdSourceRestriction  # noqa: F401,E501
from swagger_client.models.day_bounded_time_range import DayBoundedTimeRange  # noqa: F401,E501
from swagger_client.models.impression_info import ImpressionInfo  # noqa: F401,E501
from swagger_client.models.monetary_requirement_info import MonetaryRequirementInfo  # noqa: F401,E501
from swagger_client.models.publisher_location_info import PublisherLocationInfo  # noqa: F401,E501


class Publisher(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ad_size_info': 'AdResolutionInfo',
        'ad_restrictions': 'AdRestrictions',
        'publisher_location_info': 'PublisherLocationInfo',
        'play_times': 'list[DayBoundedTimeRange]',
        'monetary_requirement_info': 'MonetaryRequirementInfo',
        'impression_info': 'ImpressionInfo',
        'internet_info': 'str',
        'publisher_engine': 'str',
        'weight_vector': 'AdRequestWeights',
        'remote_evaluator': 'str',
        'ad_source_restrictions': 'AdSourceRestriction'
    }

    attribute_map = {
        'ad_size_info': 'adSizeInfo',
        'ad_restrictions': 'adRestrictions',
        'publisher_location_info': 'publisherLocationInfo',
        'play_times': 'playTimes',
        'monetary_requirement_info': 'monetaryRequirementInfo',
        'impression_info': 'impressionInfo',
        'internet_info': 'internetInfo',
        'publisher_engine': 'publisherEngine',
        'weight_vector': 'weightVector',
        'remote_evaluator': 'remoteEvaluator',
        'ad_source_restrictions': 'adSourceRestrictions'
    }

    def __init__(self, ad_size_info=None, ad_restrictions=None, publisher_location_info=None, play_times=None, monetary_requirement_info=None, impression_info=None, internet_info=None, publisher_engine=None, weight_vector=None, remote_evaluator=None, ad_source_restrictions=None):  # noqa: E501
        """Publisher - a model defined in Swagger"""  # noqa: E501

        self._ad_size_info = None
        self._ad_restrictions = None
        self._publisher_location_info = None
        self._play_times = None
        self._monetary_requirement_info = None
        self._impression_info = None
        self._internet_info = None
        self._publisher_engine = None
        self._weight_vector = None
        self._remote_evaluator = None
        self._ad_source_restrictions = None
        self.discriminator = None

        self.ad_size_info = ad_size_info
        self.ad_restrictions = ad_restrictions
        self.publisher_location_info = publisher_location_info
        if play_times is not None:
            self.play_times = play_times
        self.monetary_requirement_info = monetary_requirement_info
        if impression_info is not None:
            self.impression_info = impression_info
        if internet_info is not None:
            self.internet_info = internet_info
        self.publisher_engine = publisher_engine
        self.weight_vector = weight_vector
        if remote_evaluator is not None:
            self.remote_evaluator = remote_evaluator
        if ad_source_restrictions is not None:
            self.ad_source_restrictions = ad_source_restrictions

    @property
    def ad_size_info(self):
        """Gets the ad_size_info of this Publisher.  # noqa: E501


        :return: The ad_size_info of this Publisher.  # noqa: E501
        :rtype: AdResolutionInfo
        """
        return self._ad_size_info

    @ad_size_info.setter
    def ad_size_info(self, ad_size_info):
        """Sets the ad_size_info of this Publisher.


        :param ad_size_info: The ad_size_info of this Publisher.  # noqa: E501
        :type: AdResolutionInfo
        """
        if ad_size_info is None:
            raise ValueError("Invalid value for `ad_size_info`, must not be `None`")  # noqa: E501

        self._ad_size_info = ad_size_info

    @property
    def ad_restrictions(self):
        """Gets the ad_restrictions of this Publisher.  # noqa: E501


        :return: The ad_restrictions of this Publisher.  # noqa: E501
        :rtype: AdRestrictions
        """
        return self._ad_restrictions

    @ad_restrictions.setter
    def ad_restrictions(self, ad_restrictions):
        """Sets the ad_restrictions of this Publisher.


        :param ad_restrictions: The ad_restrictions of this Publisher.  # noqa: E501
        :type: AdRestrictions
        """
        if ad_restrictions is None:
            raise ValueError("Invalid value for `ad_restrictions`, must not be `None`")  # noqa: E501

        self._ad_restrictions = ad_restrictions

    @property
    def publisher_location_info(self):
        """Gets the publisher_location_info of this Publisher.  # noqa: E501


        :return: The publisher_location_info of this Publisher.  # noqa: E501
        :rtype: PublisherLocationInfo
        """
        return self._publisher_location_info

    @publisher_location_info.setter
    def publisher_location_info(self, publisher_location_info):
        """Sets the publisher_location_info of this Publisher.


        :param publisher_location_info: The publisher_location_info of this Publisher.  # noqa: E501
        :type: PublisherLocationInfo
        """
        if publisher_location_info is None:
            raise ValueError("Invalid value for `publisher_location_info`, must not be `None`")  # noqa: E501

        self._publisher_location_info = publisher_location_info

    @property
    def play_times(self):
        """Gets the play_times of this Publisher.  # noqa: E501


        :return: The play_times of this Publisher.  # noqa: E501
        :rtype: list[DayBoundedTimeRange]
        """
        return self._play_times

    @play_times.setter
    def play_times(self, play_times):
        """Sets the play_times of this Publisher.


        :param play_times: The play_times of this Publisher.  # noqa: E501
        :type: list[DayBoundedTimeRange]
        """

        self._play_times = play_times

    @property
    def monetary_requirement_info(self):
        """Gets the monetary_requirement_info of this Publisher.  # noqa: E501


        :return: The monetary_requirement_info of this Publisher.  # noqa: E501
        :rtype: MonetaryRequirementInfo
        """
        return self._monetary_requirement_info

    @monetary_requirement_info.setter
    def monetary_requirement_info(self, monetary_requirement_info):
        """Sets the monetary_requirement_info of this Publisher.


        :param monetary_requirement_info: The monetary_requirement_info of this Publisher.  # noqa: E501
        :type: MonetaryRequirementInfo
        """
        if monetary_requirement_info is None:
            raise ValueError("Invalid value for `monetary_requirement_info`, must not be `None`")  # noqa: E501

        self._monetary_requirement_info = monetary_requirement_info

    @property
    def impression_info(self):
        """Gets the impression_info of this Publisher.  # noqa: E501


        :return: The impression_info of this Publisher.  # noqa: E501
        :rtype: ImpressionInfo
        """
        return self._impression_info

    @impression_info.setter
    def impression_info(self, impression_info):
        """Sets the impression_info of this Publisher.


        :param impression_info: The impression_info of this Publisher.  # noqa: E501
        :type: ImpressionInfo
        """

        self._impression_info = impression_info

    @property
    def internet_info(self):
        """Gets the internet_info of this Publisher.  # noqa: E501


        :return: The internet_info of this Publisher.  # noqa: E501
        :rtype: str
        """
        return self._internet_info

    @internet_info.setter
    def internet_info(self, internet_info):
        """Sets the internet_info of this Publisher.


        :param internet_info: The internet_info of this Publisher.  # noqa: E501
        :type: str
        """
        allowed_values = ["STRONG", "AVERAGE", "WEAK"]  # noqa: E501
        if internet_info not in allowed_values:
            raise ValueError(
                "Invalid value for `internet_info` ({0}), must be one of {1}"  # noqa: E501
                .format(internet_info, allowed_values)
            )

        self._internet_info = internet_info

    @property
    def publisher_engine(self):
        """Gets the publisher_engine of this Publisher.  # noqa: E501


        :return: The publisher_engine of this Publisher.  # noqa: E501
        :rtype: str
        """
        return self._publisher_engine

    @publisher_engine.setter
    def publisher_engine(self, publisher_engine):
        """Sets the publisher_engine of this Publisher.


        :param publisher_engine: The publisher_engine of this Publisher.  # noqa: E501
        :type: str
        """
        if publisher_engine is None:
            raise ValueError("Invalid value for `publisher_engine`, must not be `None`")  # noqa: E501
        allowed_values = ["DEFAULT", "REMOTE"]  # noqa: E501
        if publisher_engine not in allowed_values:
            raise ValueError(
                "Invalid value for `publisher_engine` ({0}), must be one of {1}"  # noqa: E501
                .format(publisher_engine, allowed_values)
            )

        self._publisher_engine = publisher_engine

    @property
    def weight_vector(self):
        """Gets the weight_vector of this Publisher.  # noqa: E501


        :return: The weight_vector of this Publisher.  # noqa: E501
        :rtype: AdRequestWeights
        """
        return self._weight_vector

    @weight_vector.setter
    def weight_vector(self, weight_vector):
        """Sets the weight_vector of this Publisher.


        :param weight_vector: The weight_vector of this Publisher.  # noqa: E501
        :type: AdRequestWeights
        """
        if weight_vector is None:
            raise ValueError("Invalid value for `weight_vector`, must not be `None`")  # noqa: E501

        self._weight_vector = weight_vector

    @property
    def remote_evaluator(self):
        """Gets the remote_evaluator of this Publisher.  # noqa: E501


        :return: The remote_evaluator of this Publisher.  # noqa: E501
        :rtype: str
        """
        return self._remote_evaluator

    @remote_evaluator.setter
    def remote_evaluator(self, remote_evaluator):
        """Sets the remote_evaluator of this Publisher.


        :param remote_evaluator: The remote_evaluator of this Publisher.  # noqa: E501
        :type: str
        """

        self._remote_evaluator = remote_evaluator

    @property
    def ad_source_restrictions(self):
        """Gets the ad_source_restrictions of this Publisher.  # noqa: E501


        :return: The ad_source_restrictions of this Publisher.  # noqa: E501
        :rtype: AdSourceRestriction
        """
        return self._ad_source_restrictions

    @ad_source_restrictions.setter
    def ad_source_restrictions(self, ad_source_restrictions):
        """Sets the ad_source_restrictions of this Publisher.


        :param ad_source_restrictions: The ad_source_restrictions of this Publisher.  # noqa: E501
        :type: AdSourceRestriction
        """

        self._ad_source_restrictions = ad_source_restrictions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Publisher):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
