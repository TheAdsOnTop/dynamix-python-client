# coding: utf-8

"""
    Dynamix

    Sign up for Dynamix & grab your token.  # noqa: E501

    OpenAPI spec version: v0.1.0
    Contact: david@theadsontop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CatalogItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'url': 'str',
        'adapter_version': 'str',
        'dynamix_version': 'str',
        'home_page': 'str',
        'author_email': 'str',
        'type': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'url': 'url',
        'adapter_version': 'adapterVersion',
        'dynamix_version': 'dynamixVersion',
        'home_page': 'homePage',
        'author_email': 'authorEmail',
        'type': 'type'
    }

    def __init__(self, name=None, description=None, url=None, adapter_version=None, dynamix_version=None, home_page=None, author_email=None, type=None):  # noqa: E501
        """CatalogItem - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._url = None
        self._adapter_version = None
        self._dynamix_version = None
        self._home_page = None
        self._author_email = None
        self._type = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if url is not None:
            self.url = url
        if adapter_version is not None:
            self.adapter_version = adapter_version
        if dynamix_version is not None:
            self.dynamix_version = dynamix_version
        if home_page is not None:
            self.home_page = home_page
        if author_email is not None:
            self.author_email = author_email
        if type is not None:
            self.type = type

    @property
    def name(self):
        """Gets the name of this CatalogItem.  # noqa: E501


        :return: The name of this CatalogItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CatalogItem.


        :param name: The name of this CatalogItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this CatalogItem.  # noqa: E501


        :return: The description of this CatalogItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CatalogItem.


        :param description: The description of this CatalogItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def url(self):
        """Gets the url of this CatalogItem.  # noqa: E501


        :return: The url of this CatalogItem.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CatalogItem.


        :param url: The url of this CatalogItem.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def adapter_version(self):
        """Gets the adapter_version of this CatalogItem.  # noqa: E501


        :return: The adapter_version of this CatalogItem.  # noqa: E501
        :rtype: str
        """
        return self._adapter_version

    @adapter_version.setter
    def adapter_version(self, adapter_version):
        """Sets the adapter_version of this CatalogItem.


        :param adapter_version: The adapter_version of this CatalogItem.  # noqa: E501
        :type: str
        """

        self._adapter_version = adapter_version

    @property
    def dynamix_version(self):
        """Gets the dynamix_version of this CatalogItem.  # noqa: E501


        :return: The dynamix_version of this CatalogItem.  # noqa: E501
        :rtype: str
        """
        return self._dynamix_version

    @dynamix_version.setter
    def dynamix_version(self, dynamix_version):
        """Sets the dynamix_version of this CatalogItem.


        :param dynamix_version: The dynamix_version of this CatalogItem.  # noqa: E501
        :type: str
        """

        self._dynamix_version = dynamix_version

    @property
    def home_page(self):
        """Gets the home_page of this CatalogItem.  # noqa: E501


        :return: The home_page of this CatalogItem.  # noqa: E501
        :rtype: str
        """
        return self._home_page

    @home_page.setter
    def home_page(self, home_page):
        """Sets the home_page of this CatalogItem.


        :param home_page: The home_page of this CatalogItem.  # noqa: E501
        :type: str
        """

        self._home_page = home_page

    @property
    def author_email(self):
        """Gets the author_email of this CatalogItem.  # noqa: E501


        :return: The author_email of this CatalogItem.  # noqa: E501
        :rtype: str
        """
        return self._author_email

    @author_email.setter
    def author_email(self, author_email):
        """Sets the author_email of this CatalogItem.


        :param author_email: The author_email of this CatalogItem.  # noqa: E501
        :type: str
        """

        self._author_email = author_email

    @property
    def type(self):
        """Gets the type of this CatalogItem.  # noqa: E501


        :return: The type of this CatalogItem.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CatalogItem.


        :param type: The type of this CatalogItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["RANKER", "CONTENTPROVIDER", "CONSTRAINTPROVIDER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CatalogItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
