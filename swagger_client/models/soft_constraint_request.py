# coding: utf-8

"""
    Dynamix

    Sign up for Dynamix & grab your token.  # noqa: E501

    OpenAPI spec version: v0.1.0
    Contact: david@theadsontop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.ad_request_vector import AdRequestVector  # noqa: F401,E501
from swagger_client.models.keyed_ad import KeyedAd  # noqa: F401,E501


class SoftConstraintRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vector': 'AdRequestVector',
        'ad_list': 'list[KeyedAd]'
    }

    attribute_map = {
        'vector': 'vector',
        'ad_list': 'adList'
    }

    def __init__(self, vector=None, ad_list=None):  # noqa: E501
        """SoftConstraintRequest - a model defined in Swagger"""  # noqa: E501

        self._vector = None
        self._ad_list = None
        self.discriminator = None

        self.vector = vector
        self.ad_list = ad_list

    @property
    def vector(self):
        """Gets the vector of this SoftConstraintRequest.  # noqa: E501


        :return: The vector of this SoftConstraintRequest.  # noqa: E501
        :rtype: AdRequestVector
        """
        return self._vector

    @vector.setter
    def vector(self, vector):
        """Sets the vector of this SoftConstraintRequest.


        :param vector: The vector of this SoftConstraintRequest.  # noqa: E501
        :type: AdRequestVector
        """
        if vector is None:
            raise ValueError("Invalid value for `vector`, must not be `None`")  # noqa: E501

        self._vector = vector

    @property
    def ad_list(self):
        """Gets the ad_list of this SoftConstraintRequest.  # noqa: E501


        :return: The ad_list of this SoftConstraintRequest.  # noqa: E501
        :rtype: list[KeyedAd]
        """
        return self._ad_list

    @ad_list.setter
    def ad_list(self, ad_list):
        """Sets the ad_list of this SoftConstraintRequest.


        :param ad_list: The ad_list of this SoftConstraintRequest.  # noqa: E501
        :type: list[KeyedAd]
        """
        if ad_list is None:
            raise ValueError("Invalid value for `ad_list`, must not be `None`")  # noqa: E501

        self._ad_list = ad_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SoftConstraintRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
