# coding: utf-8

"""
    Dynamix

    Sign up for Dynamix & grab your token.  # noqa: E501

    OpenAPI spec version: v0.1.0
    Contact: david@theadsontop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.time_range import TimeRange  # noqa: F401,E501


class DayBoundedTimeRange(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'days_of_week': 'list[str]',
        'time_range': 'TimeRange'
    }

    attribute_map = {
        'days_of_week': 'daysOfWeek',
        'time_range': 'timeRange'
    }

    def __init__(self, days_of_week=None, time_range=None):  # noqa: E501
        """DayBoundedTimeRange - a model defined in Swagger"""  # noqa: E501

        self._days_of_week = None
        self._time_range = None
        self.discriminator = None

        if days_of_week is not None:
            self.days_of_week = days_of_week
        if time_range is not None:
            self.time_range = time_range

    @property
    def days_of_week(self):
        """Gets the days_of_week of this DayBoundedTimeRange.  # noqa: E501


        :return: The days_of_week of this DayBoundedTimeRange.  # noqa: E501
        :rtype: list[str]
        """
        return self._days_of_week

    @days_of_week.setter
    def days_of_week(self, days_of_week):
        """Sets the days_of_week of this DayBoundedTimeRange.


        :param days_of_week: The days_of_week of this DayBoundedTimeRange.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"]  # noqa: E501
        if not set(days_of_week).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `days_of_week` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(days_of_week) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._days_of_week = days_of_week

    @property
    def time_range(self):
        """Gets the time_range of this DayBoundedTimeRange.  # noqa: E501


        :return: The time_range of this DayBoundedTimeRange.  # noqa: E501
        :rtype: TimeRange
        """
        return self._time_range

    @time_range.setter
    def time_range(self, time_range):
        """Sets the time_range of this DayBoundedTimeRange.


        :param time_range: The time_range of this DayBoundedTimeRange.  # noqa: E501
        :type: TimeRange
        """

        self._time_range = time_range

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DayBoundedTimeRange):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
