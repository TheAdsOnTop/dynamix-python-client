# coding: utf-8

"""
    Dynamix

    Sign up for Dynamix & grab your token.  # noqa: E501

    OpenAPI spec version: v0.1.0
    Contact: david@theadsontop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.ad import Ad  # noqa: F401,E501
from swagger_client.models.impressions_validation_data import ImpressionsValidationData  # noqa: F401,E501


class PopRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ad': 'Ad',
        'play_time': 'int',
        'impressions_data': 'ImpressionsValidationData'
    }

    attribute_map = {
        'ad': 'ad',
        'play_time': 'playTime',
        'impressions_data': 'impressionsData'
    }

    def __init__(self, ad=None, play_time=None, impressions_data=None):  # noqa: E501
        """PopRequest - a model defined in Swagger"""  # noqa: E501

        self._ad = None
        self._play_time = None
        self._impressions_data = None
        self.discriminator = None

        self.ad = ad
        self.play_time = play_time
        self.impressions_data = impressions_data

    @property
    def ad(self):
        """Gets the ad of this PopRequest.  # noqa: E501


        :return: The ad of this PopRequest.  # noqa: E501
        :rtype: Ad
        """
        return self._ad

    @ad.setter
    def ad(self, ad):
        """Sets the ad of this PopRequest.


        :param ad: The ad of this PopRequest.  # noqa: E501
        :type: Ad
        """
        if ad is None:
            raise ValueError("Invalid value for `ad`, must not be `None`")  # noqa: E501

        self._ad = ad

    @property
    def play_time(self):
        """Gets the play_time of this PopRequest.  # noqa: E501


        :return: The play_time of this PopRequest.  # noqa: E501
        :rtype: int
        """
        return self._play_time

    @play_time.setter
    def play_time(self, play_time):
        """Sets the play_time of this PopRequest.


        :param play_time: The play_time of this PopRequest.  # noqa: E501
        :type: int
        """
        if play_time is None:
            raise ValueError("Invalid value for `play_time`, must not be `None`")  # noqa: E501

        self._play_time = play_time

    @property
    def impressions_data(self):
        """Gets the impressions_data of this PopRequest.  # noqa: E501


        :return: The impressions_data of this PopRequest.  # noqa: E501
        :rtype: ImpressionsValidationData
        """
        return self._impressions_data

    @impressions_data.setter
    def impressions_data(self, impressions_data):
        """Sets the impressions_data of this PopRequest.


        :param impressions_data: The impressions_data of this PopRequest.  # noqa: E501
        :type: ImpressionsValidationData
        """
        if impressions_data is None:
            raise ValueError("Invalid value for `impressions_data`, must not be `None`")  # noqa: E501

        self._impressions_data = impressions_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PopRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
