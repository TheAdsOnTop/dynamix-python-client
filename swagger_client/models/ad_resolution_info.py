# coding: utf-8

"""
    Dynamix

    Sign up for Dynamix & grab your token.  # noqa: E501

    OpenAPI spec version: v0.1.0
    Contact: david@theadsontop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.aspect_ratio import AspectRatio  # noqa: F401,E501
from swagger_client.models.resolution import Resolution  # noqa: F401,E501
from swagger_client.models.screen_dimensions import ScreenDimensions  # noqa: F401,E501


class AdResolutionInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aspect_ratio': 'AspectRatio',
        'resolution': 'Resolution',
        'screen_dimensions': 'ScreenDimensions'
    }

    attribute_map = {
        'aspect_ratio': 'aspectRatio',
        'resolution': 'resolution',
        'screen_dimensions': 'screenDimensions'
    }

    def __init__(self, aspect_ratio=None, resolution=None, screen_dimensions=None):  # noqa: E501
        """AdResolutionInfo - a model defined in Swagger"""  # noqa: E501

        self._aspect_ratio = None
        self._resolution = None
        self._screen_dimensions = None
        self.discriminator = None

        self.aspect_ratio = aspect_ratio
        self.resolution = resolution
        self.screen_dimensions = screen_dimensions

    @property
    def aspect_ratio(self):
        """Gets the aspect_ratio of this AdResolutionInfo.  # noqa: E501


        :return: The aspect_ratio of this AdResolutionInfo.  # noqa: E501
        :rtype: AspectRatio
        """
        return self._aspect_ratio

    @aspect_ratio.setter
    def aspect_ratio(self, aspect_ratio):
        """Sets the aspect_ratio of this AdResolutionInfo.


        :param aspect_ratio: The aspect_ratio of this AdResolutionInfo.  # noqa: E501
        :type: AspectRatio
        """
        if aspect_ratio is None:
            raise ValueError("Invalid value for `aspect_ratio`, must not be `None`")  # noqa: E501

        self._aspect_ratio = aspect_ratio

    @property
    def resolution(self):
        """Gets the resolution of this AdResolutionInfo.  # noqa: E501


        :return: The resolution of this AdResolutionInfo.  # noqa: E501
        :rtype: Resolution
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this AdResolutionInfo.


        :param resolution: The resolution of this AdResolutionInfo.  # noqa: E501
        :type: Resolution
        """
        if resolution is None:
            raise ValueError("Invalid value for `resolution`, must not be `None`")  # noqa: E501

        self._resolution = resolution

    @property
    def screen_dimensions(self):
        """Gets the screen_dimensions of this AdResolutionInfo.  # noqa: E501


        :return: The screen_dimensions of this AdResolutionInfo.  # noqa: E501
        :rtype: ScreenDimensions
        """
        return self._screen_dimensions

    @screen_dimensions.setter
    def screen_dimensions(self, screen_dimensions):
        """Sets the screen_dimensions of this AdResolutionInfo.


        :param screen_dimensions: The screen_dimensions of this AdResolutionInfo.  # noqa: E501
        :type: ScreenDimensions
        """
        if screen_dimensions is None:
            raise ValueError("Invalid value for `screen_dimensions`, must not be `None`")  # noqa: E501

        self._screen_dimensions = screen_dimensions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdResolutionInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
