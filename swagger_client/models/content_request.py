# coding: utf-8

"""
    Dynamix

    Sign up for Dynamix & grab your token.  # noqa: E501

    OpenAPI spec version: v0.1.0
    Contact: david@theadsontop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.date_bounded_time_range import DateBoundedTimeRange  # noqa: F401,E501


class ContentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time_ranges': 'list[DateBoundedTimeRange]',
        'publisher_rids': 'list[str]',
        'file_rid': 'str'
    }

    attribute_map = {
        'time_ranges': 'timeRanges',
        'publisher_rids': 'publisherRids',
        'file_rid': 'fileRid'
    }

    def __init__(self, time_ranges=None, publisher_rids=None, file_rid=None):  # noqa: E501
        """ContentRequest - a model defined in Swagger"""  # noqa: E501

        self._time_ranges = None
        self._publisher_rids = None
        self._file_rid = None
        self.discriminator = None

        self.time_ranges = time_ranges
        self.publisher_rids = publisher_rids
        self.file_rid = file_rid

    @property
    def time_ranges(self):
        """Gets the time_ranges of this ContentRequest.  # noqa: E501


        :return: The time_ranges of this ContentRequest.  # noqa: E501
        :rtype: list[DateBoundedTimeRange]
        """
        return self._time_ranges

    @time_ranges.setter
    def time_ranges(self, time_ranges):
        """Sets the time_ranges of this ContentRequest.


        :param time_ranges: The time_ranges of this ContentRequest.  # noqa: E501
        :type: list[DateBoundedTimeRange]
        """
        if time_ranges is None:
            raise ValueError("Invalid value for `time_ranges`, must not be `None`")  # noqa: E501

        self._time_ranges = time_ranges

    @property
    def publisher_rids(self):
        """Gets the publisher_rids of this ContentRequest.  # noqa: E501


        :return: The publisher_rids of this ContentRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._publisher_rids

    @publisher_rids.setter
    def publisher_rids(self, publisher_rids):
        """Sets the publisher_rids of this ContentRequest.


        :param publisher_rids: The publisher_rids of this ContentRequest.  # noqa: E501
        :type: list[str]
        """
        if publisher_rids is None:
            raise ValueError("Invalid value for `publisher_rids`, must not be `None`")  # noqa: E501

        self._publisher_rids = publisher_rids

    @property
    def file_rid(self):
        """Gets the file_rid of this ContentRequest.  # noqa: E501


        :return: The file_rid of this ContentRequest.  # noqa: E501
        :rtype: str
        """
        return self._file_rid

    @file_rid.setter
    def file_rid(self, file_rid):
        """Sets the file_rid of this ContentRequest.


        :param file_rid: The file_rid of this ContentRequest.  # noqa: E501
        :type: str
        """
        if file_rid is None:
            raise ValueError("Invalid value for `file_rid`, must not be `None`")  # noqa: E501

        self._file_rid = file_rid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContentRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
