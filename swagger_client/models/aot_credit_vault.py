# coding: utf-8

"""
    Dynamix

    Sign up for Dynamix & grab your token.  # noqa: E501

    OpenAPI spec version: v0.1.0
    Contact: david@theadsontop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.currency import Currency  # noqa: F401,E501


class AotCreditVault(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rid': 'str',
        'transaction_rids': 'list[str]',
        'total_in_cents': 'int',
        'currency': 'Currency'
    }

    attribute_map = {
        'rid': 'rid',
        'transaction_rids': 'transactionRids',
        'total_in_cents': 'totalInCents',
        'currency': 'currency'
    }

    def __init__(self, rid=None, transaction_rids=None, total_in_cents=None, currency=None):  # noqa: E501
        """AotCreditVault - a model defined in Swagger"""  # noqa: E501

        self._rid = None
        self._transaction_rids = None
        self._total_in_cents = None
        self._currency = None
        self.discriminator = None

        if rid is not None:
            self.rid = rid
        if transaction_rids is not None:
            self.transaction_rids = transaction_rids
        if total_in_cents is not None:
            self.total_in_cents = total_in_cents
        if currency is not None:
            self.currency = currency

    @property
    def rid(self):
        """Gets the rid of this AotCreditVault.  # noqa: E501


        :return: The rid of this AotCreditVault.  # noqa: E501
        :rtype: str
        """
        return self._rid

    @rid.setter
    def rid(self, rid):
        """Sets the rid of this AotCreditVault.


        :param rid: The rid of this AotCreditVault.  # noqa: E501
        :type: str
        """

        self._rid = rid

    @property
    def transaction_rids(self):
        """Gets the transaction_rids of this AotCreditVault.  # noqa: E501


        :return: The transaction_rids of this AotCreditVault.  # noqa: E501
        :rtype: list[str]
        """
        return self._transaction_rids

    @transaction_rids.setter
    def transaction_rids(self, transaction_rids):
        """Sets the transaction_rids of this AotCreditVault.


        :param transaction_rids: The transaction_rids of this AotCreditVault.  # noqa: E501
        :type: list[str]
        """

        self._transaction_rids = transaction_rids

    @property
    def total_in_cents(self):
        """Gets the total_in_cents of this AotCreditVault.  # noqa: E501


        :return: The total_in_cents of this AotCreditVault.  # noqa: E501
        :rtype: int
        """
        return self._total_in_cents

    @total_in_cents.setter
    def total_in_cents(self, total_in_cents):
        """Sets the total_in_cents of this AotCreditVault.


        :param total_in_cents: The total_in_cents of this AotCreditVault.  # noqa: E501
        :type: int
        """

        self._total_in_cents = total_in_cents

    @property
    def currency(self):
        """Gets the currency of this AotCreditVault.  # noqa: E501


        :return: The currency of this AotCreditVault.  # noqa: E501
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AotCreditVault.


        :param currency: The currency of this AotCreditVault.  # noqa: E501
        :type: Currency
        """

        self._currency = currency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AotCreditVault):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
